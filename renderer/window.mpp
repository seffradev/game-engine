module;

#include <GLFW/glfw3.h>
#include <vulkan/vulkan_core.h>

#include <cstdint>
#include <expected>
#include <memory>
#include <ranges>
#include <vector>

export module window;

export enum struct WindowError {
    InitialisationFailure,
    InstantiationFailure,
    InstanceCreationFailure,
    SurfaceCreationFailure,
    UnsupportedGpu,
    LimitedGpu,
};

export struct Dimensions {
    size_t width;
    size_t height;
};

class GlfwManager {
public:
    static constexpr auto initialise() noexcept
        -> std::expected<void, WindowError> {
        static auto result = glfwInit();
        if (!result)
            return std::unexpected{
                WindowError::InitialisationFailure};
        return {};
    }

private:
    constexpr GlfwManager() noexcept = default;

    constexpr ~GlfwManager() noexcept { glfwTerminate(); }
};

export class Window {
public:
    static constexpr auto
    create(Dimensions dimensions, std::string title) noexcept
        -> std::expected<Window, WindowError> {
        if (auto result = GlfwManager::initialise(); !result) {
            return std::unexpected{result.error()};
        }

        auto [width, height] = dimensions;
        auto window          = glfwCreateWindow(
            width, height, title.c_str(), nullptr, nullptr);

        if (!window) {
            return std::unexpected{
                WindowError::InstantiationFailure};
        }

        auto windowHandle = WindowHandle{window, windowDeleter};
        return Window{dimensions, windowHandle};
    }

    constexpr auto clear() const noexcept {
        glClear(GL_COLOR_BUFFER_BIT);
    }

    constexpr auto swapBuffers() const noexcept {
        glfwSwapBuffers(windowHandle.get());
    }

    constexpr auto pollEvents() { glfwPollEvents(); }

    constexpr Window(Window&&) noexcept            = default;
    constexpr Window& operator=(Window&&) noexcept = delete;

private:
    constexpr Window(auto&& dimensions, auto&& window) noexcept
        : dimensions(dimensions),
          windowHandle(std::move(window)) {}

    static constexpr auto windowDeleter =
        [](GLFWwindow* window) noexcept -> void {
        glfwDestroyWindow(window);
    };

    using WindowHandle =
        std::unique_ptr<GLFWwindow, decltype(windowDeleter)>;

    Dimensions   dimensions;
    WindowHandle windowHandle;
};
